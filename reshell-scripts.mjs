#!/usr/bin/env zx

import fs from "fs";
import path from "path";

const PORTALS_BASE_PATH = path.join(__dirname, "src", "portals");

const cmd = process.argv[3];
const portalName = process.argv[4];
const scriptName = process.argv[5];

if (portalName) {
  // Validate portal name
  if (!getAvailablePortalNames().includes(portalName)) {
    throw new ReferenceError(`Unknown portal name: ${portalName}`);
  }

  // Write __registerPortals__.js
  fs.writeFileSync(
    path.join(__dirname, "src", "__registerPortals__.js"),
    generateRegisterPortalsScript(portalName)
  );
}

const commands = {
  "list-commands": {
    description: "Lists the available commands",
    action: () => {
      console.log(
        Object.entries(commands)
          .map(([cmd, meta]) => {
            let ret = `${cmd}\n`;

            if (meta.description) {
              ret += `${meta.description}\n`;
            }

            ret += `Usage: ${meta.example || `npm run ${cmd}`}\n`;

            return ret;
          })
          .join("\n")
      );
    },
  },

  "list-portals": {
    description: "Lists the available portals",
    action: () => {
      console.log(
        getAvailablePortalNames()
          .map(portalName => ` -- ${portalName}`)
          .join("\n")
      );
    },
  },

  "list-portal-scripts": {
    description: "Lists the available scripts for the given portal",
    example: "npm run list-portal-scripts ExamplePortal",
    action: () => {
      const portalScripts = getPortalScripts(portalName);

      if (portalScripts.length) {
        console.log(
          portalScripts.map(scriptFile => ` -- ${scriptFile}`).join("\n")
        );
      } else {
        console.warn(
          `No portal scripts are available for portal: ${portalName}`
        );
      }
    },
  },

  exec: {
    description: `Executes a portal script using Google's ZX interpreter`,
    example: "npm run exec ExamplePortal hello-world.js",
    action: async () => {
      await execPortalScript(portalName, scriptName);
    },
  },

  start: {
    description: `Starts a portal's development environment`,
    example: "npm run start ExamplePortal",
    action: async () => {
      if (!portalName) {
        throw new ReferenceError("Cannot start without a known portal name");
      }

      // TODO: Include multiple choice selection if no portal name is specified
      // in CLI
      await $`HTTPS=true craco start`;
    },
  },

  "start:no-ssl": {
    description: `Starts a portal's development environment w/o an SSL frontend`,
    example: "npm run start:no-ssl ExamplePortal",
    action: async () => {
      if (!portalName) {
        throw new ReferenceError("Cannot start without a known portal name");
      }

      // TODO: Include multiple choice selection if no portal name is specified
      // in CLI
      await $`craco start`;
    },
  },

  build: {
    description: `Builds a portal for production`,
    example: "npm run build ExamplePortal",
    action: async () => {
      if (!portalName) {
        throw new ReferenceError("Cannot build without a known portal name");
      }

      // TODO: Include multiple choice selection if no portal name is specified
      // in CLI
      await $`craco build --profile`;
    },
  },

  test: {
    action: async () => {
      await $`craco test`;
    },
  },
};

if (commands[cmd]) {
  await commands[cmd].action();
} else {
  throw new ReferenceError(`Unknown command: ${cmd}`);
}

/**
 * TODO: Ensure this only returns directory names
 *
 * @return {string[]}
 */
function getAvailablePortalNames() {
  return fs.readdirSync(PORTALS_BASE_PATH);
}

/**
 * @return {string[]}
 */
function getPortalScripts(portalName) {
  const scriptsBasePath = path.join(PORTALS_BASE_PATH, portalName, "scripts");

  if (fs.existsSync(scriptsBasePath)) {
    return fs.readdirSync(scriptsBasePath);
  } else {
    return [];
  }
}

/**
 * @param {string} portalName
 * @return {string}
 */
function generateRegisterPortalsScript(portalName) {
  let ret =
    "// This file is automatically generated and should not be directly modified\n\n";
  ret += 'import React from "react";\n';
  ret += 'import ReShellCore from "./core";';
  ret += "\n\n";
  ret +=
    "// The portals defined here are what are selectable inside of the application\n";
  ret += "const portals = {\n";
  ret += "  default: React.lazy(() =>\n";
  ret += `    import("@portals/${portalName}")\n`;
  ret += "  )\n";

  ret += "};\n";
  ret += "\n";
  ret += "ReShellCore.registerPortals(portals);\n";

  return ret;
}

/**
 * @param {string} portalName
 * @param {string} scriptName
 * @return {Promise<any>}
 */
async function execPortalScript(portalName, scriptName) {
  return $`zx ${path.join(
    PORTALS_BASE_PATH,
    portalName,
    "scripts",
    scriptName
  )}`;
}
